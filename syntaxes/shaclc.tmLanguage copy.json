{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "SHACL Compact Syntax",
  "root": {},
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#directive"
    },
    {
      "include": "#boolean"
    },
    {
      "include": "#nodeKind"
    },
    {
      "include": "#numericLiteral"
    },
    {
      "include": "#iriref"
    },
    {
      "include": "#pname_ln"
    },
    {
      "include": "#arrow"
    },
    {
      "include": "#equals"
    },
    {
      "include": "#pref"
    },
    {
      "include": "#star"
    },
    {
      "include": "#regex"
    }
  ],
  "repository": {
		"arrow": {
			"patterns": [
				{
					"match": "->",
					"name": "keyword.operator"
				}
			]
		},
		"equals": {
			"patterns": [
				{
					"match": "=",
					"name": "keyword.operator"
				}
			]
		},
		"pref": {
			"patterns": [
				{
					"match": "[a-zA-Z]*:",
					"name": "constant.character"
				}
			]
		},
		"pname_ln": {
			"patterns": [
				{
					"match": "[a-zA-Z]*:[a-zA-Z]+",
					"name": "constant.character",
					"captures": {
						"0": {
							"patterns": [
								{
									"match": "[a-zA-Z]*",
									"name": "constant.character"
								}
							]
						},
						"1": {
							"patterns": [
								{
									"match": ":",
									"name": "keyword.operator"
								}
							]
						},
						"2": {
							"patterns": [
								{
									"match": "[a-zA-Z]+",
									"name": "variable.name.shaclc"
								}
							]
						}
					}
				}
			]
		},
		"numericLiteral": {
			"patterns": [
				{
					"include": "#integer"
				},
				{
					"include": "#decimal"
				}
			]
		},
		"integer": {
			"patterns": [
				{
					"match": "[+-]?[0-9]+",
					"name": "constant.numeric"
				}
			]
		},
		"star": {
			"patterns": [
				{
					"match": "\\*",
					"name": "constant.numeric"
				}
			]
		},
		"decimal": {
			"patterns": [
				{
					"match": "[+-]?[0-9]*\\.[0-9]+",
					"name": "constant.numeric"
				}
			]
		},


		"directive": {
			"patterns": [
				{
					"include": "#base"
				},
				{
					"include": "#imports"
				},
				{
					"include": "#prefix"
				},
				{
					"include": "#nodeParam"
				}
			]
		},
		// "regex": {
		// 	"patterns": [
    //     {
    //       "begin": "//",
		// 			"patterns": [
		// 				{
		// 					"match": ".*",
		// 					"name": "string.regexp"
		// 				}
		// 			],
		// 			"end": "//"
		// 		}
    //   ]
		// },
		"base": {
			"patterns": [
        {
					"name": "keyword.control",
          "begin": "^BASE",
					"patterns": [
						{
							"include": "#iriref"
						}
					],
					"end": "$"
				}
      ]
		},
		"imports": {
			"patterns": [
        {
					"name": "keyword.control",
          "begin": "^IMPORTS",
					"patterns": [
						{
							"include": "#iriref"
						}
					],
					"end": "$"
				}
      ]
		},
		"prefix": {
			"patterns": [
        {
					"name": "keyword.control",
          "begin": "^PREFIX",
					"patterns": [
						{
							"include": "#iriref"
						}
					],
					"end": "$"
				}
      ]
		},
		"baset": {
			"patterns": [
        {
					"include": "#kw_base"
				},
				{
					"include": "#iriref"
				}
      ]
		},
		"kw_base": {
			"patterns": [
        {
          "name": "keyword.operator.new",
          "match": "BASE"
        }
      ]
		},
    "iriref": {
      "patterns": [
        {
          "name": "keyword.other",
          "match": "(<((\\\\u[0-9A-Fa-f]{4})|(\\\\U[0-9A-Fa-f]{6})|([^\u0000-\u0020=<>\\\"{}|^`\\\\]*))>)"
        }
      ]
    },
		"boolean": {
			"patterns": [
        {
          "name": "constant.language.shaclc",
          "match": "\\b(true|false)\\b"
        }
      ]
		},
    "uchar": {
      "patterns": [
        {
          "name": "markup.underline.link",
          "match": "(\\\\u[0-9A-Fa-f]{4})|(\\\\U[0-9A-Fa-f]{6})"
        }
      ]
    },
    "shaclDoc": {},
    "nodeParam": {
      "patterns": [
        {
          "name": "variable.name.shaclc",
          "match": "\\b(deactivated|severity|message|class|datatype|nodeKind|minExclusive|minInclusive|maxExclusive|maxInclusive|minLength|maxLength|pattern|flags|languageIn|uniqueLang|equals|disjoint|lessThan|lessThanOrEquals|qualifiedValueShape|qualifiedMinCount|qualifiedMaxCount|qualifiedValueShapesDisjoint|closed|ignoredProperties|hasValue|in)\\b"
        }
      ]
    },
    "nodeKind": {
      "patterns": [
        {
          "name": "constant.character.escape",
          "match": "\\b(BlankNode|IRI|Literal|BlankNodeOrIRI|BlankNodeOrLiteral|IRIOrLiteral)\\b"
        }
      ]
    },
    "target": {
      "patterns": [
        {
          "name": "keyword.comment.shaclc",
          "match": "\\b(targetNode|targetObjectsOf|targetSubjectsOf)\\b"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line",
          "match": "#[^\n\r]*"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.shaclc",
          "match": "\\b(shape|shapeClass)\\b",
					"comment": "A SHACL Constraint"
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.shaclc",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.shaclc",
          "match": "\\\\."
        }
      ]
    }
  },
  "scopeName": "source.shaclc"
}
